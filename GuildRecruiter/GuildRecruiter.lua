-- =====================================================
-- GuildRecruiter ‚Äî –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å CRUD –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
-- =====================================================

-- SavedVariables (per account)
GR_Settings = GR_Settings or {
    message      = "üåü –ì–∏–ª—å–¥–∏—è –ú–µ—Å—Ç–Ω—ã–µ –î–µ–¥—ã –Ω–∞–±–∏—Ä–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤! –ü–∏—à–∏—Ç–µ /w –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
    channelType  = "SAY",    -- SAY, YELL, GUILD, PARTY, RAID, CHANNEL
    channelId    = nil,      -- –¥–ª—è CHANNEL (—á–∏—Å–ª–æ–≤–æ–π ID)
    randomize    = false,    -- true ‚Äî –±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
    templates    = {}        -- –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è randomize
}

-- ==== –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è / –°–æ–æ–±—â–µ–Ω–∏—è ====
local MSG = {
    msg_changed            = "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ",
    msg_need_text          = "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç: /gru msg <—Ç–µ–∫—Å—Ç>",
    channel_set            = "–ö–∞–Ω–∞–ª: %s",
    channel_current        = "–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: %s",
    channel_need_input     = "–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ –∏–º—è –∫–∞–Ω–∞–ª–∞: /gru chan CHANNEL <id|name>",
    channel_not_found      = "–ö–∞–Ω–∞–ª '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å: /join %s",
    channel_id_not_found   = "–ö–∞–Ω–∞–ª —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω.",
    invalid_channel_type   = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–∞–Ω–∞–ª–∞: %s. –î–æ—Å—Ç—É–ø–Ω–æ: SAY, YELL, GUILD, PARTY, RAID, CHANNEL",
    random_state           = "randomize=%s, —à–∞–±–ª–æ–Ω–æ–≤: %d",
    random_usage           = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /gru random on|off",
    tmpl_added             = "–®–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ: %d",
    tmpl_need_text         = "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞: /gru addtmpl <—Ç–µ–∫—Å—Ç>",
    tmpl_cleared           = "–®–∞–±–ª–æ–Ω—ã –æ—á–∏—â–µ–Ω—ã",
    tmpl_exists            = "–®–∞–±–ª–æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.",
    tmpl_list              = "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ (%d):",
    tmpl_deleted           = "–®–∞–±–ª–æ–Ω #%d —É–¥–∞–ª—ë–Ω",
    tmpl_deleted_nf        = "–®–∞–±–ª–æ–Ω —Å –∏–Ω–¥–µ–∫—Å–æ–º %d –Ω–µ –Ω–∞–π–¥–µ–Ω",
    tmpl_edited            = "–®–∞–±–ª–æ–Ω #%d –∏–∑–º–µ–Ω—ë–Ω",
    tmpl_edit_need         = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gru edittmpl <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>",
    no_channels            = "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –∫–∞–Ω–∞–ª—É.",
    channels_list          = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:",
    no_channel_id          = "–ù–µ –∑–∞–¥–∞–Ω channelId –¥–ª—è CHANNEL. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /gru chan CHANNEL <id|name>",
    send_done              = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ %s",
    random_empty_warn      = "–í–∫–ª—é—á–µ–Ω–∞ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è, –Ω–æ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ—Ç ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–æ.",
}

-- ==== –£—Ç–∏–ª–∏—Ç—ã ====
local function colored(msg)
    print("|cff00ff00[GR]|r " .. msg)
end

local function trim(s)
    return (s or ""):gsub("^%s+", ""):gsub("%s+$", "")
end

local function normalizeChannelName(name)
    local s = tostring(name or "")
    return s:lower()
        :gsub("|c%x%x%x%x%x%x%x%x", "")
        :gsub("|r", "")
        :gsub("^%s+", "")
        :gsub("%s+$", "")
end

local function iterateChannels(callback)
    local list = { GetChannelList() }
    local i = 1
    while i <= #list do
        local id, name, flag = list[i], list[i+1], list[i+2]
        if type(id) == "number" and type(name) == "string" then
            if callback(id, name) then
                return true
            end
        end
        i = i + (type(flag) == "boolean" and 3 or 2)
    end
end

local function findChannel(input)
    local num = tonumber(input)
    local norm = normalizeChannelName(input)
    local found
    iterateChannels(function(id, name)
        if (num and id == num) or (not num and normalizeChannelName(name) == norm) then
            found = id
            return true
        end
    end)
    return found
end

-- ==== –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ====
local ALLOWED_TYPES = {
    SAY=true, YELL=true, GUILD=true, PARTY=true, RAID=true, CHANNEL=true
}

local function setChannel(ctype, arg)
    if ctype == "CHANNEL" then
        local key = trim(arg)
        if key == "" then
            return colored(MSG.channel_need_input)
        end
        local id = findChannel(key)
        if id then
            GR_Settings.channelType = "CHANNEL"
            GR_Settings.channelId   = id
            colored(string.format(MSG.channel_set, "CHANNEL("..id..")"))
        else
            if tonumber(key) then
                colored(string.format(MSG.channel_id_not_found, tonumber(key)))
            else
                colored(string.format(MSG.channel_not_found, key, key))
            end
        end

    else
        if not ALLOWED_TYPES[ctype] then
            return colored(string.format(MSG.invalid_channel_type, ctype))
        end
        GR_Settings.channelType = ctype
        GR_Settings.channelId   = nil
        colored(string.format(MSG.channel_set, ctype))
    end
end

local _lastIdx
local function pickMessage()
    if GR_Settings.randomize then
        local tcount = #GR_Settings.templates
        if tcount > 0 then
            local idx = math.random(tcount)
            if tcount > 1 and _lastIdx and idx == _lastIdx then
                idx = idx % tcount + 1
            end
            _lastIdx = idx
            return GR_Settings.templates[idx]
        else
            GR_Settings.randomize = false
            colored(MSG.random_empty_warn)
        end
    end
    return GR_Settings.message
end

local function send()
    local msg = pickMessage()
    if GR_Settings.channelType == "CHANNEL" then
        if not GR_Settings.channelId then
            return colored(MSG.no_channel_id)
        end
        SendChatMessage(msg, "CHANNEL", nil, GR_Settings.channelId)
        colored(string.format(MSG.send_done, "CHANNEL("..GR_Settings.channelId..")"))
    else
        SendChatMessage(msg, GR_Settings.channelType)
        colored(string.format(MSG.send_done, GR_Settings.channelType))
    end
end

-- ==== CRUD –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ ====
local function printTemplates()
    local count = #GR_Settings.templates
    colored(string.format(MSG.tmpl_list, count))
    for i, text in ipairs(GR_Settings.templates) do
        print(string.format(" [%d] %s", i, text))
    end
end

local function deleteTemplate(idx)
    idx = tonumber(idx)
    if not idx or idx < 1 or idx > #GR_Settings.templates then
        return colored(string.format(MSG.tmpl_deleted_nf, idx or 0))
    end
    table.remove(GR_Settings.templates, idx)
    colored(string.format(MSG.tmpl_deleted, idx))
end

local function editTemplate(idx, newText)
    idx = tonumber(idx)
    if not idx or idx < 1 or idx > #GR_Settings.templates then
        return colored(string.format(MSG.tmpl_deleted_nf, idx or 0))
    end
    GR_Settings.templates[idx] = newText
    colored(string.format(MSG.tmpl_edited, idx))
end

-- ==== –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Å–ø—Ä–∞–≤–∫–∞ ====
local function printStatus()
    print("|cffffff00–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:|r")
    print(string.format(" –ö–∞–Ω–∞–ª: %s%s",
        GR_Settings.channelType,
        GR_Settings.channelId and (" ("..GR_Settings.channelId..")") or ""
    ))
    print(" –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è:", GR_Settings.randomize and "–≤–∫–ª." or "–≤—ã–∫–ª.")
    print(" –®–∞–±–ª–æ–Ω–æ–≤:", #GR_Settings.templates)
    print(" –°–æ–æ–±—â–µ–Ω–∏–µ:", GR_Settings.message)
end

local function printHelp()
    print("|cffffff00–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:|r")
    print("/gru msg <—Ç–µ–∫—Å—Ç>            ‚Äî –∑–∞–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print("/gru chan <TYPE> [id|name]  ‚Äî –∫–∞–Ω–∞–ª (SAY/YELL/GUILD/PARTY/RAID/CHANNEL)")
    print("/gru random on|off          ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é")
    print("/gru addtmpl <—Ç–µ–∫—Å—Ç>        ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω")
    print("/gru clrtmpl                ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —à–∞–±–ª–æ–Ω—ã")
    print("/gru listtmpl               ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã")
    print("/gru deltmpl <–Ω–æ–º–µ—Ä>        ‚Äî —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É")
    print("/gru edittmpl <–Ω–æ–º–µ—Ä> <—Ç–µ–∫—Å—Ç> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω")
    print("/gru status                 ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("/gru listchannels           ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
    print("/gru send                   ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print("/gru help                   ‚Äî —Å–ø—Ä–∞–≤–∫–∞")
end

-- ==== Slash-–∫–æ–º–∞–Ω–¥–∞ ====
SLASH_GUILDRECRUITER1 = "/gru"
SlashCmdList["GUILDRECRUITER"] = function(cmd)
    local cmdName, rest = cmd:match("^(%S*)%s*(.-)$")
    cmdName = (cmdName or ""):lower()

    if cmdName == "msg" then
        rest = trim(rest)
        if rest == "" then
            return colored(MSG.msg_need_text)
        end
        GR_Settings.message = rest
        colored(MSG.msg_changed)

    elseif cmdName == "chan" then
        local ctype, arg = rest:match("^(%S+)%s*(.-)$")
        if not ctype or ctype == "" then
            return colored(MSG.channel_need_input)
        end
        setChannel(ctype:upper(), arg)

    elseif cmdName == "random" then
        rest = rest:lower()
        if rest == "on" then
            GR_Settings.randomize = true
        elseif rest == "off" then
            GR_Settings.randomize = false
        else
            return colored(MSG.random_usage)
        end
        colored(string.format(MSG.random_state,
            tostring(GR_Settings.randomize), #GR_Settings.templates
        ))

    elseif cmdName == "addtmpl" then
        local text = trim(rest)
        if text == "" then
            return colored(MSG.tmpl_need_text)
        end
        for _, v in ipairs(GR_Settings.templates) do
            if v == text then
                return colored(MSG.tmpl_exists)
            end
        end
        table.insert(GR_Settings.templates, text)
        colored(string.format(MSG.tmpl_added, #GR_Settings.templates))

    elseif cmdName == "clrtmpl" then
        GR_Settings.templates = {}
        colored(MSG.tmpl_cleared)

    elseif cmdName == "listtmpl" then
        printTemplates()

    elseif cmdName == "deltmpl" then
        if trim(rest) == "" then
            return colored("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞: /gru deltmpl <–Ω–æ–º–µ—Ä>")
        end
        deleteTemplate(rest)

    elseif cmdName == "edittmpl" then
        local idx, text = rest:match("^(%S+)%s+(.+)$")
        if not idx or not text then
            return colored(MSG.tmpl_edit_need)
        end
        editTemplate(idx, text)

    elseif cmdName == "status" then
        printStatus()

    elseif cmdName == "listchannels" then
        local found = false
        iterateChannels(function(id, name)
            if not found then
                colored(MSG.channels_list)
                found = true
            end
            print(string.format(" [%d] %s", id, name))
        end)
        if not found then
            colored(MSG.no_channels)
        end

    elseif cmdName == "send" then
        send()

    else
        printHelp()
    end
end

-- ==== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ====
local frame = CreateFrame("Frame")
frame:RegisterEvent("ADDON_LOADED")
frame:SetScript("OnEvent", function(self, event, addon)
    if addon == "GuildRecruiter" then
        GR_Settings.templates = GR_Settings.templates or {}
        colored("GuildRecruiter –∑–∞–≥—Ä—É–∂–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /gru help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    end
end)
