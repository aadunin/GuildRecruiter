name: release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # если захотим git log fallback — ставим 0

      - name: Compute version
        id: v
        run: echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

      - name: Debug listing
        run: |
          echo "Root:"
          ls -la
          if [ -d GuildRecruiter ]; then
            echo "GuildRecruiter/:"
            ls -la GuildRecruiter
          else
            echo "No GuildRecruiter/ dir"
          fi

      - name: Prepare zip
        run: |
          set -e
          mkdir -p dist
          if [ -d GuildRecruiter ]; then
            echo "Packing existing GuildRecruiter/ directory"
            zip -r "dist/GuildRecruiter-v${{ steps.v.outputs.version }}.zip" GuildRecruiter -x "*/.git/*"
          else
            echo "GuildRecruiter/ not found, creating package from root files"
            mkdir -p pkg/GuildRecruiter
            cp -f *.toc *.lua pkg/GuildRecruiter/ 2>/dev/null || true
            if ! ls pkg/GuildRecruiter/*.toc >/dev/null 2>&1; then
              echo "No TOC found to package. Abort."
              exit 12
            fi
            (cd pkg && zip -r "../dist/GuildRecruiter-v${{ steps.v.outputs.version }}.zip" GuildRecruiter)
          fi
          echo "Built archive:"
          ls -lh dist/

      - name: Generate release notes
        id: notes
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const tag = context.ref.replace('refs/tags/', '');
            try {
              const { data } = await github.rest.repos.generateReleaseNotes({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                target_commitish: process.env.GITHUB_SHA
              });
              const body = (data && data.body && data.body.trim())
                ? data.body
                : `### Changes\n- ${tag} released.`;
              core.info(`Generated notes (preview): ${body.slice(0, 200).replace(/\\n/g, ' ')}`);
              return body;
            } catch (e) {
              core.warning(`generateReleaseNotes failed: ${e.message}`);
              const fallback = `### Changes\n- ${tag} released.`;
              core.info(`Using fallback notes: ${fallback}`);
              return fallback;
            }

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: GuildRecruiter ${{ github.ref_name }}
          body: ${{ steps.notes.outputs.result }}
          draft: false
          prerelease: false
          generate_release_notes: false
          files: |
            dist/GuildRecruiter-v${{ steps.v.outputs.version }}.zip
